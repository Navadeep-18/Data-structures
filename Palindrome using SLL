#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Node structure for the linked list
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the list
void insertAtBeginning(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Function to check if the linked list is a palindrome
bool isPalindrome(Node* head) {
    // Base case: empty list or single node is considered a palindrome
    if (head == NULL || head->next == NULL) {
        return true;
    }

    // Traverse the list to find the middle node
    Node* slow = head;
    Node* fast = head;
    Node* prev = NULL;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        Node* temp = slow->next;
        slow->next = prev;
        prev = slow;
        slow = temp;
    }

    // If the list has an odd number of nodes, move the slow pointer to the next node
    if (fast != NULL) {
        slow = slow->next;
    }

    // Compare the first half (reversed) with the second half
    Node* firstHalf = prev;
    Node* secondHalf = slow;

    while (secondHalf != NULL) {
        if (firstHalf->data != secondHalf->data) {
            return false;
        }
        firstHalf = firstHalf->next;
        secondHalf = secondHalf->next;
    }

    return true;
}

int main() {
    Node* head = NULL;

    // Create a linked list
    insertAtBeginning(&head, 1);
    insertAtBeginning(&head, 2);
    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 2);
    insertAtBeginning(&head, 1);

    if (isPalindrome(head)) {
        printf("The linked list is a palindrome.\n");
    } else {
        printf("The linked list is not a palindrome.\n");
    }

    return 0;
}
