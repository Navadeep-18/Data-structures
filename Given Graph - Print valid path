#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

// Graph structure
typedef struct {
    int numNodes;
    int adjacency[MAX_NODES][MAX_NODES];
} Graph;

// Path structure
typedef struct {
    int path[MAX_NODES];
    int length;
} Path;

// Function to add an edge to the graph
void addEdge(Graph* graph, int source, int destination) {
    graph->adjacency[source][destination] = 1;
}

// Function to check if a path is valid
int isValidPath(Graph* graph, Path* path) {
    for (int i = 0; i < path->length - 1; i++) {
        if (graph->adjacency[path->path[i]][path->path[i + 1]] == 0) {
            return 0;
        }
    }
    return 1;
}

// Function to print a path
void printPath(Path* path) {
    for (int i = 0; i < path->length; i++) {
        printf("%d ", path->path[i]);
    }
    printf("\n");
}

// Depth-first search function
void dfs(Graph* graph, int currentNode, Path* path, int targetNode) {
    path->path[path->length++] = currentNode;

    if (currentNode == targetNode) {
        if (isValidPath(graph, path)) {
            printPath(path);
        }
    } else {
        for (int i = 0; i < graph->numNodes; i++) {
            if (graph->adjacency[currentNode][i]) {
                dfs(graph, i, path, targetNode);
            }
        }
    }

    path->length--;
}

int main() {
    Graph graph;
    graph.numNodes = 5;

    // Add edges to the graph
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 4);
    addEdge(&graph, 1, 2);
    addEdge(&graph, 1, 3);
    addEdge(&graph, 1, 4);
    addEdge(&graph, 2, 3);
    addEdge(&graph, 3, 4);

    Path path;
    path.length = 0;

    dfs(&graph, 0, &path, 4);

    return 0;
}
