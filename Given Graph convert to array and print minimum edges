#include <stdio.h>
#include <stdlib.h>

// Graph node struct
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

// Graph struct
typedef struct Graph {
    int vertices;
    Node** adjList;
} Graph;

// Create a new node
Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Create a new graph
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->vertices = vertices;
    graph->adjList = (Node**)calloc(vertices, sizeof(Node*));
    return graph;
}

// Add an edge to the graph
void addEdge(Graph* graph, int src, int dest) {
    // Add edge from src to dest
    Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;

    // For undirected graph, add edge from dest to src
    newNode = createNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}

// Print the graph
void printGraph(Graph* graph) {
    for (int i = 0; i < graph->vertices; i++) {
        Node* temp = graph->adjList[i];
        printf("%d -> ", i);
        while (temp) {
            printf("%d ", temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }
}

// Find the minimum number of edges
int minEdges(Graph* graph) {
    int minEdges = graph->vertices - 1;
    for (int i = 0; i < graph->vertices; i++) {
        int count = 0;
        Node* temp = graph->adjList[i];
        while (temp) {
            count++;
            temp = temp->next;
        }
        if (count < minEdges) {
            minEdges = count;
        }
    }
    return minEdges;
}

int main() {
    Graph* graph = createGraph(5);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printf("Graph:\n");
    printGraph(graph);

    printf("Minimum number of edges: %d\n", minEdges(graph));

    return 0;
}
